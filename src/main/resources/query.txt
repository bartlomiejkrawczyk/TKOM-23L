fun prepareDatabase(): Map<String, int> {
	Map<String, int> database = [
		"key_1" : 1,
		"key_2" : 100
	];

	int value = database["key_1"];

	database.put("key_3", 1000);
	if (database.contains("key_1")) {
		database.remove("key_1");
	}

	return database;
}

fun prepareSimpleQuery(): Iterable<String, int> {
	Map<String, int> database = prepareDatabase();

	Iterable<String, int> result =
		SELECT
			db.key AS id,
			db.value AS value
		FROM database AS db
		WHERE value >= 100 AND id != "key_1"
		ORDER BY value ASC;

	return result;
}

fun multiply(a: int, b: int): int {
	return a * b;
}

fun prepareAdvancedQuery(): Iterable<String, int, int, int> {
	Map<String, Map<String, int>> database = [
		"id_1" : [
			"property_1" : 1,
			"property_2" : 2,
			"property_3" : 3
		],
		"id_2" : [
			"property_1" : 2,
			"property_2" : 3,
			"property_3" : 4
		]
	];

	Iterable<String, int, int, int> result =
		SELECT
			db.key AS id,
			db.value["property_1"] AS property_1,
			db.value["property_2"] AS property_2,
			multiply(db.value["property_3"], 2) AS property_3
		FROM database AS db
		WHERE property_1 < property_2
		ORDER BY property_3 DESC;

	return result;
}

fun prepareAdvancedJoinQuery(): Iterable<String, int, int, int> {
	Map<String, Map<String, int>> database1 = [
		"id_1" : [
			"property_1" : 1,
			"property_2" : 2,
			"property_3" : 3
		],
		"id_2" : [
			"property_1" : 2,
			"property_2" : 3,
			"property_3" : 4
		]
	];

	Map<String, Map<String, int>> database2 = [
    		"id_1" : [
    			"property_1" : 1,
    			"property_2" : 2,
    			"property_3" : 3
    		],
    		"id_2" : [
    			"property_1" : 2,
    			"property_2" : 3,
    			"property_3" : 4
    		]
    	];

	Iterable<String, int, int, int> result =
		SELECT
			db1.key AS id1,
			db2.key AS id2,
			db2.value["property_1"] AS property_1,
			db1.value["property_2"] AS property_2,
			multiply(db1.value["property_3"]) AS property_3
		FROM database1 AS db1
		JOIN database2 AS db2 ON db1.key == db2.key
		WHERE NOT - property_1 > property_2
		ORDER BY property_3 DESC;

	return result;
}

fun compare(first: Tuple<String, int>, second: Tuple<String, int>): int {
	return first.value < second.value;
}

fun main() {
	Iterable<String, int> result = prepareSimpleQuery();

	for (Tuple<String, int> row: result) {
		print(row.id);
		print(row.value);
	}

	int a = 0;
	while (a < 10) {
		a = a + 1;
	}

	Map<String, int> database = prepareDatabase();
	Comparator<Tuple<String, int>> comparator = compare;

	for (Tuple<String, int> entry: database.iterable(comparator)) {
		print(entry.key);
	}
}
