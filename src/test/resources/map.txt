#!/mnt/c/Users/Public/Documents/TKOM/interpreter

fun compare(first: Tuple<String, Map<String, int>>, second: Tuple<String, Map<String, int>>): int {
	if (first.value["property_1"] > second.value["property_1"]) {
		return 1;
	} else if (first.value["property_1"] == second.value["property_1"]) {
		return 0;
	} else {
		return -1;
	}
}

fun reverse(first: Tuple<String, Map<String, int>>, second: Tuple<String, Map<String, int>>): int {
	if (first.value["property_1"] > second.value["property_1"]) {
		return -1;
	} else if (first.value["property_1"] == second.value["property_1"]) {
		return 0;
	} else {
		return 1;
	}
}

fun main() {
	Map<String, Map<String, int>> database = [
		"id_1" : [
			"property_1" : 1,
			"property_2" : 2,
			"property_3" : 3
		],
		"id_2" : [
			"property_1" : 2,
			"property_2" : 3,
			"property_3" : 4
		],
		"id_3" : [
			"property_1" : 3,
			"property_2" : 4,
			"property_3" : 5
		]
	];

	Map<String, int> value = database.retrieveValue("id_1");
	value.put("property_1", 4);
	database.put("id_4", value);

	print(@String value.contains("nothing"));
	print(@String database.contains("id_1"));

	for (Tuple<String, Map<String, int>> tuple : database.sortedIterable(compare)) {
		print(tuple.key);
	}

	database.remove("id_1");

	for (Tuple<String, Map<String, int>> tuple : database.sortedIterable(reverse)) {
		print(tuple.key);
	}
}
